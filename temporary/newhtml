<!DOCTYPE html>
<html lang="nl">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Live Quiz App</title>
  <!-- MediaPipe Libraries -->
  <script src="https://cdn.jsdelivr.net/npm/@mediapipe/hands/hands.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@mediapipe/camera_utils/camera_utils.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@mediapipe/drawing_utils/drawing_utils.js"></script>
  <link rel="stylesheet" href="style2.css">
  <link rel="stylesheet" href="qui">
  
  <!-- Kiosk-like behaviors -->
  <script>
    // Disable right-click context menu (kiosk-like behavior)
    document.addEventListener('contextmenu', function(e) {
      e.preventDefault();
    });
    
    // Disable F12, Ctrl+Shift+I, etc. (kiosk-like behavior)
    document.addEventListener('keydown', function(e) {
      // Disable F12
      if (e.key === 'F12') {
        e.preventDefault();
      }
      // Disable Ctrl+Shift+I
      if (e.ctrlKey && e.shiftKey && e.key === 'I') {
        e.preventDefault();
      }
      // Disable Ctrl+U (view source)
      if (e.ctrlKey && e.key === 'u') {
        e.preventDefault();
      }
      // Disable Ctrl+S (save)
      if (e.ctrlKey && e.key === 's') {
        e.preventDefault();
      }
    });
    
    // Fullscreen on load (app-like behavior)
    document.addEventListener('DOMContentLoaded', function() {
      // Request fullscreen if not already
      if (!document.fullscreenElement) {
        document.documentElement.requestFullscreen().catch(err => {
          console.log('Fullscreen request failed:', err);
        });
      }
      
      // Auto-request camera permissions (use-fake-ui-for-media-stream equivalent)
      navigator.mediaDevices.getUserMedia({ 
        video: { 
          width: { ideal: 1280 },
          height: { ideal: 720 },
          facingMode: 'user'
        }, 
        audio: false 
      }).then(function(stream) {
        console.log('Camera access granted');
        // Store stream for later use
        window.cameraStream = stream;
      }).catch(function(err) {
        console.log('Camera access denied:', err);
      });
      
      // Prevent page unload/refresh (kiosk-like behavior)
      window.addEventListener('beforeunload', function(e) {
        e.preventDefault();
        e.returnValue = '';
      });
      
      // Keep page active (disable-background-timer-throttling equivalent)
      setInterval(function() {
        // Small operation to keep page active
        document.body.style.transform = 'translateZ(0)';
      }, 1000);
      
      // Prevent sleep/idle (disable-backgrounding-occluded-windows equivalent)
      let wakeLock = null;
      if ('wakeLock' in navigator) {
        navigator.wakeLock.request('screen').then(function(lock) {
          wakeLock = lock;
          console.log('Screen wake lock acquired');
        }).catch(function(err) {
          console.log('Wake lock failed:', err);
        });
      }
      
      // Handle visibility change to maintain performance
      document.addEventListener('visibilitychange', function() {
        if (document.hidden) {
          // Page is hidden, but keep running (disable-renderer-backgrounding equivalent)
          console.log('Page hidden but keeping active');
        } else {
          // Page is visible again
          console.log('Page visible again');
          // Re-acquire wake lock if lost
          if ('wakeLock' in navigator && (!wakeLock || wakeLock.released)) {
            navigator.wakeLock.request('screen').then(function(lock) {
              wakeLock = lock;
            }).catch(function(err) {
              console.log('Wake lock re-acquisition failed:', err);
            });
          }
        }
      });
    });
    
    // Disable text selection (kiosk-like behavior)
    document.onselectstart = function() {
      return false;
    };
    
    // Disable drag and drop (kiosk-like behavior)
    document.ondragstart = function() {
      return false;
    };
    
    // Auto-focus and prevent navigation away
    window.addEventListener('focus', function() {
      document.body.focus();
    });
    
    // Override window.open to prevent popups (security equivalent)
    window.open = function() {
      console.log('Popup blocked');
      return null;
    };
  </script>
</head>
<style>
  /* Kiosk-like styles */
  * {
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    -webkit-touch-callout: none;
    -webkit-tap-highlight-color: transparent;
  }
  
  body {
    overflow: hidden; /* Prevent scrolling in kiosk mode */
    cursor: default;
  }
  
  /* Animation Container Styles */
  .animation-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: #000;
    display: none;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    overflow: hidden;
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
  }

  .animation-container.active {
    display: flex !important;
    opacity: 1;
  }

  /* Animation GIF Styles */
  .animation-gif {
    max-width: 100%;
    max-height: 100%;
    object-fit: contain;
    transform: scale(0.8);
    transition: transform 0.5s ease-out;
  }

  .animation-container.active .animation-gif {
    transform: scale(1);
  }

  /* Instructions Popup Styles */
  .instructions-popup {
    position: fixed;
    top: 50%;
    left: -350px;
    transform: translateY(-50%);
    width: 320px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 20px;
    border-radius: 15px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    z-index: 1001;
    transition: left 0.5s ease-out;
    font-family: 'Arial', sans-serif;
  }

  .instructions-popup.show {
    left: 200px;
  }

  .instructions-popup h3 {
    margin: 0 0 15px 0;
    font-size: 20px;
    text-align: center;
    font-weight: bold;
  }

  .instructions-popup p {
    margin: 10px 0;
    font-size: 14px;
    line-height: 1.4;
  }

  .finger-examples {
    display: flex;
    justify-content: space-around;
    margin: 15px 0;
    padding: 10px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 10px;
  }

  .finger-example {
    text-align: center;
    font-size: 12px;
  }

  .finger-number {
    font-size: 24px;
    font-weight: bold;
    margin-bottom: 5px;
  }

  .close-btn {
    position: absolute;
    top: 8px;
    right: 12px;
    background: none;
    border: none;
    color: white;
    font-size: 18px;
    cursor: pointer;
    opacity: 0.7;
    transition: opacity 0.3s;
  }

  .close-btn:hover {
    opacity: 1;
  }
</style>
<body>
  <!-- Instructions Popup -->
  <div class="instructions-popup" id="instructionsPopup">
    <button class="close-btn" id="closeInstructions">√ó</button>
    <h3>üñêÔ∏è Hoe werkt het?</h3>
    <p>Gebruik je vingers om antwoorden te kiezen:</p>
    <div class="finger-examples">
      <div class="finger-example">
        <div class="finger-number">‚òùÔ∏è</div>
        <div>Antwoord 1</div>
      </div>
      <div class="finger-example">
        <div class="finger-number">‚úåÔ∏è</div>
        <div>Antwoord 2</div>
      </div>
      <div class="finger-example">
        <div class="finger-number">ü§ü</div>
        <div>Antwoord 3</div>
      </div>
      <div class="finger-example">
        <div class="finger-number">üñêÔ∏è</div>
        <div>Antwoord 4</div>
      </div>
    </div>
    <p><strong>Tip:</strong> Steek het aantal vingers op dat overeenkomt met je antwoordkeuze!</p>
  </div>

  <!-- Intro Video Container -->
  <div class="intro-container" id="introContainer">
    <video 
      id="introVideo" 
      class="intro-video" 
      autoplay 
      muted 
      loop
      playsinline
    >
      <source src="Movie_003.mp4" type="video/mp4">
      Your browser does not support the video tag.
    </video>
    <button class="skip-button" id="skipButton">Skip Intro</button>
  </div>
   <div class="animation-container" id="animationContainer">
    <!-- Using GIF for animation -->
    <img src="ani.gif" alt="Animation" class="animation-gif" id="animationGif">
  </div>

  <!-- Click to Start Overlay -->
  <div class="click-to-start-overlay" id="clickToStartOverlay">
    <div class="floating-elements" id="floatingElements"></div>
    <div class="click-prompt" id="clickPrompt">
      <h1>Quiz Tijd!</h1>
      <p>Klik om de quiz te starten
        <br>
        deze quiz werkt ook met handgebaren steek 5 fingers op 
      </p>
      <div class="click-indicator"></div>
    </div>
  </div>

  <!-- Main App (initially hidden) -->
  <div class="main-app" id="mainApp">
    <div class="progress-bar" id="progressBar"></div>
    
    <div class="camera-section">
      <video id="camera" class="flip" autoplay muted playsinline></video>
      <canvas id="handCanvas"></canvas>
      <div class="loading" id="loading">Loading hand tracking‚Ä¶</div>
      <div class="words"></div>
    </div>
    
    <div class="quiz-section">
      <div class="question"><h2 class="text-question"></h2></div>
      <div class="answers"></div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/@mediapipe/selfie_segmentation/selfie_segmentation.js"></script>
  <!-- Our custom JavaScript modules -->
  <script src="handTracking.js"></script>
  <script src="wordAnimation.js"></script>
  <script src="quizLogic.js"></script>
  <script src="main.js"></script>
  <script>
    // Animation JavaScript - Modified to work with main.js
    document.addEventListener('DOMContentLoaded', function () {
      const animationContainer = document.getElementById('animationContainer');
      const animationGif = document.getElementById('animationGif');
      const introContainer = document.getElementById('introContainer');
      const clickToStartOverlay = document.getElementById('clickToStartOverlay');
      const instructionsPopup = document.getElementById('instructionsPopup');
      const closeInstructions = document.getElementById('closeInstructions');

      // Instructions popup functionality
      function showInstructions() {
        instructionsPopup.classList.add('show');
        
        // Auto-hide after 10 seconds
        setTimeout(() => {
          hideInstructions();
        }, 10000);
      }

      function hideInstructions() {
        instructionsPopup.classList.remove('show');
      }

      // Close button functionality
      closeInstructions.addEventListener('click', hideInstructions);

      // Function to show animation (called from main.js)
      window.showAnimation = function() {
        console.log('Starting animation sequence...');
        
        // Hide intro container with fade
        introContainer.style.transition = 'opacity 0.3s ease-out';
        introContainer.style.opacity = '0';
        
        setTimeout(() => {
          introContainer.style.display = 'none';
        }, 300);
        
        // Hide click to start overlay with fade
        clickToStartOverlay.style.transition = 'opacity 0.3s ease-out';
        clickToStartOverlay.style.opacity = '0';
        
        setTimeout(() => {
          clickToStartOverlay.style.display = 'none';
        }, 300);
        
        // Show animation container with fade in
        setTimeout(() => {
          animationContainer.style.display = 'flex';
          animationContainer.classList.add('active');
        }, 300);

        // Force reload the GIF to restart it
        if (animationGif) {
          const gifSrc = 'ani.gif';
          animationGif.src = '';
          setTimeout(() => {
            // Add timestamp to force browser to reload the GIF
            animationGif.src = gifSrc + '?t=' + new Date().getTime();
          }, 400);
        }

        // After 3 seconds, hide animation with fade out
        setTimeout(() => {
          console.log('Animation finished, fading out...');
          animationContainer.style.opacity = '0';
          
          setTimeout(() => {
            animationContainer.classList.remove('active');
            animationContainer.style.display = 'none';
            animationContainer.style.opacity = '1'; // Reset for next time
            
            // Show instructions popup after animation ends and quiz starts
            setTimeout(() => {
              showInstructions();
            }, 500);
          }, 300);
        }, 3000);
      };
    });
  </script>
</body>
</html>